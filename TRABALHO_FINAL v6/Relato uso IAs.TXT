RELATO DE USO DE IA: 

(x)SIM 

()N√ÉO

SE SIM, EXPLIQUE COMO FOI FEITO:
A intelig√™ncia artificial ajudou na realiza√ß√£o dessa tarefa ao 
entregar respostas geradas por prompts , que se referiam √† como
fazer a constru√ß√£o das classes e m√©todos seguindo os crit√©rios 
exigidos pelo Trabalho Final. Atrav√©s disso, as sugest√µes recebidas 
pela tecnologia foram avaliadas e testadas para verificar se havia a 
presen√ßa de erros no c√≥digo e se condizia com o que havia sido pedido
originalmente nos prompts.

obs: Tivemos que usar pois haviamos realizado um progama 
que n√£o seguia todos os crit√©rios originais do TF, apenas 
descobrindo tal fato nas √∫ltimas horas dispon√≠veis.

obs2: Caso deseje ver o programa original, pode o achar em:
https://github.com/IluminumPi/TF

PROMPT 1:
Preciso de uma classe cliente que tenha - matr√≠cula (int)
- nome (String)
- academia (String)
- dados do equipamento alugado (tipo Equipamento)
Cada academia pode alugar no m√≠nimo 1 de cada tipo, respeitando o estoque
dispon√≠vel.
M√©todos: construtor, getters, setters, toString

SAIDA 1:
Perfeito! Abaixo est√° o c√≥digo da **classe `Cliente`**, conforme sua descri√ß√£o, integrada com a classe `Equipamento`:

---

### ‚úÖ Classe `Cliente`

```java
public class Cliente {
    private int matricula;
    private String nome;
    private String academia;
    private Equipamento equipamentoAlugado;

    // Construtor
    public Cliente(int matricula, String nome, String academia, Equipamento equipamentoAlugado) {
        this.matricula = matricula;
        this.nome = nome;
        this.academia = academia;
        this.equipamentoAlugado = equipamentoAlugado;
    }

    // Getters
    public int getMatricula() {
        return matricula;
    }

    public String getNome() {
        return nome;
    }

    public String getAcademia() {
        return academia;
    }

    public Equipamento getEquipamentoAlugado() {
        return equipamentoAlugado;
    }

    // Setters
    public void setMatricula(int matricula) {
        this.matricula = matricula;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public void setAcademia(String academia) {
        this.academia = academia;
    }

    public void setEquipamentoAlugado(Equipamento equipamentoAlugado) {
        this.equipamentoAlugado = equipamentoAlugado;
    }

    // toString
    @Override
    public String toString() {
        return "Cliente{" +
                "matricula=" + matricula +
                ", nome='" + nome + '\'' +
                ", academia='" + academia + '\'' +
                ", equipamentoAlugado=" + (equipamentoAlugado != null ? equipamentoAlugado.toString() : "Nenhum") +
                '}';
    }
}
```

---

### üîÅ Exemplo de uso

Suponha que voc√™ tenha um objeto `Equipamento` chamado `esteira`:

```java
Equipamento esteira = new Equipamento("Esteira", "Cardio", 3, 1500.00);
Cliente cliente1 = new Cliente(101, "Jo√£o da Silva", "Academia Fit", esteira);

System.out.println(cliente1);
```

---

### üß† Dica extra (sobre aluguel e estoque)

Se quiser fazer um controle de estoque mais rigoroso, pode criar um m√©todo em `CadastroEquipamento` que **verifica se ainda h√° unidades dispon√≠veis** de um equipamento antes de permitir o aluguel:

```java
public boolean alugarEquipamento(String nomeEquipamento) {
    int index = totalEquipamentos(nomeEquipamento);
    if (index != -1 && contas[index].getQuantidade() > 0) {
        contas[index].setQuantidade(contas[index].getQuantidade() - 1);
        return true;
    }
    return false;
}
```

Se quiser, posso te ajudar a montar um sistema simples de aluguel para amarrar clientes com equipamentos e garantir que respeite o estoque. Deseja isso?


PROMPT 2:
Preciso de uma classe Equipamento com os atributos:
- c√≥digo (int)
- nome (String)
- tipo: barra, kettlebell ou corda naval (String)
- quantidade dispon√≠vel para loca√ß√£o (int)
- valor base da loca√ß√£o (double)
- valor do aluguel por 1 semana, 15 dias ou 1 m√™s (com 5% de desconto para 15 dias e
10% para 1 m√™s)
- seguro (boolean): se for contratado, acrescenta 2% ao valor total
M√©todos: construtor, getters, setters, toString, retirar() (diminui quantidade se
dispon√≠vel) e devolver() (aumenta quantidade).

SAIDA 2:
√ìtimo! Com base nas especifica√ß√µes que voc√™ deu, aqui est√° a implementa√ß√£o completa da classe `Equipamento` em Java.

---

### ‚úÖ Classe `Equipamento`

```java
public class Equipamento {
    private int codigo;
    private String nome;
    private String tipo; // "barra", "kettlebell" ou "corda naval"
    private int quantidadeDisponivel;
    private double valorBase;
    private boolean seguro;

    // Construtor
    public Equipamento(int codigo, String nome, String tipo, int quantidadeDisponivel, double valorBase, boolean seguro) {
        this.codigo = codigo;
        this.nome = nome;
        this.tipo = tipo;
        this.quantidadeDisponivel = quantidadeDisponivel;
        this.valorBase = valorBase;
        this.seguro = seguro;
    }

    // Getters
    public int getCodigo() {
        return codigo;
    }

    public String getNome() {
        return nome;
    }

    public String getTipo() {
        return tipo;
    }

    public int getQuantidadeDisponivel() {
        return quantidadeDisponivel;
    }

    public double getValorBase() {
        return valorBase;
    }

    public boolean isSeguro() {
        return seguro;
    }

    // Setters
    public void setCodigo(int codigo) {
        this.codigo = codigo;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    public void setQuantidadeDisponivel(int quantidadeDisponivel) {
        this.quantidadeDisponivel = quantidadeDisponivel;
    }

    public void setValorBase(double valorBase) {
        this.valorBase = valorBase;
    }

    public void setSeguro(boolean seguro) {
        this.seguro = seguro;
    }

    // toString
    @Override
    public String toString() {
        return "Equipamento{" +
                "codigo=" + codigo +
                ", nome='" + nome + '\'' +
                ", tipo='" + tipo + '\'' +
                ", quantidadeDisponivel=" + quantidadeDisponivel +
                ", valorBase=" + valorBase +
                ", seguro=" + (seguro ? "Contratado" : "N√£o contratado") +
                '}';
    }

    // M√©todo para calcular o valor do aluguel com base no per√≠odo
    public double calcularValorAluguel(int dias) {
        double valor = valorBase;
        
        if (dias == 15) {
            valor *= 0.95; // 5% de desconto
        } else if (dias >= 30) {
            valor *= 0.90; // 10% de desconto
        }

        if (seguro) {
            valor *= 1.02; // 2% de acr√©scimo
        }

        return valor;
    }

    // M√©todo para retirar (alugar) equipamento
    public boolean retirar() {
        if (quantidadeDisponivel > 0) {
            quantidadeDisponivel--;
            return true;
        } else {
            return false; // sem estoque
        }
    }

    // M√©todo para devolver (devolver ao estoque)
    public void devolver() {
        quantidadeDisponivel++;
    }
}
```

---

### üîÅ Exemplo de uso

```java
public class TesteEquipamento {
    public static void main(String[] args) {
        Equipamento barra = new Equipamento(101, "Barra Ol√≠mpica", "barra", 5, 200.0, true);
        
        System.out.println(barra);
        System.out.println("Valor para 1 semana: R$" + barra.calcularValorAluguel(7));
        System.out.println("Valor para 15 dias: R$" + barra.calcularValorAluguel(15));
        System.out.println("Valor para 1 m√™s: R$" + barra.calcularValorAluguel(30));
        
        System.out.println("Retirando equipamento...");
        if (barra.retirar()) {
            System.out.println("Alugado com sucesso.");
        } else {
            System.out.println("Estoque insuficiente.");
        }

        System.out.println("Quantidade atual: " + barra.getQuantidadeDisponivel());

        barra.devolver();
        System.out.println("Devolvido. Quantidade atual: " + barra.getQuantidadeDisponivel());
    }
}
```

---

Se quiser, posso integrar essa classe com seu sistema de cadastro ou adicionar controle autom√°tico de retirada com base no estoque. Deseja isso tamb√©m?


PROMPT 3:
Preciso de uma classe CadastroEquipamento:
- Armazena at√© 10 equipamentos
- Deve conter ao menos 6 equipamentos pr√©-cadastrados (2 de cada tipo)
- M√©todos: adicionaEquipamento, removeEquipamento, buscaEquipamentoPeloNome,
totalEquipamentos, mostraEquipamentos

SAIDA 3:
Perfeito! Com base nos seus requisitos e na estrutura anterior que voc√™ j√° compartilhou, aqui est√° uma vers√£o da **classe `CadastroEquipamento`** revisada, com:

* Armazenamento de at√© 10 equipamentos
* 6 equipamentos pr√©-cadastrados (2 de cada tipo: barra, kettlebell, corda naval)
* M√©todos solicitados: `adicionaEquipamento`, `removeEquipamento`, `buscaEquipamentoPeloNome`, `totalEquipamentos`, `mostraEquipamentos`

---

### ‚úÖ Classe `CadastroEquipamento`

```java
import java.util.Scanner;

public class CadastroEquipamento {
    private Equipamento[] equipamentos = new Equipamento[10];
    private int total = 0;
    private Scanner entrada = new Scanner(System.in);

    // Construtor que cadastra 6 equipamentos iniciais
    public CadastroEquipamento() {
        equipamentos[total++] = new Equipamento(1, "Barra Ol√≠mpica", "barra", 3, 200.0, false);
        equipamentos[total++] = new Equipamento(2, "Barra Curva", "barra", 2, 180.0, true);
        equipamentos[total++] = new Equipamento(3, "Kettlebell 12kg", "kettlebell", 4, 120.0, false);
        equipamentos[total++] = new Equipamento(4, "Kettlebell 16kg", "kettlebell", 3, 150.0, true);
        equipamentos[total++] = new Equipamento(5, "Corda Naval M√©dia", "corda naval", 2, 250.0, false);
        equipamentos[total++] = new Equipamento(6, "Corda Naval Pesada", "corda naval", 1, 300.0, true);
    }

    // Adiciona novo equipamento, se houver espa√ßo
    public void adicionaEquipamento() {
        if (total < equipamentos.length) {
            System.out.print("Digite o c√≥digo do equipamento: ");
            int codigo = entrada.nextInt();
            entrada.nextLine(); // Limpa o buffer
            System.out.print("Digite o nome do equipamento: ");
            String nome = entrada.nextLine();
            System.out.print("Digite o tipo (barra, kettlebell ou corda naval): ");
            String tipo = entrada.nextLine();
            System.out.print("Digite a quantidade dispon√≠vel: ");
            int quantidade = entrada.nextInt();
            System.out.print("Digite o valor base da loca√ß√£o: ");
            double valorBase = entrada.nextDouble();
            System.out.print("Deseja contratar seguro? (true/false): ");
            boolean seguro = entrada.nextBoolean();

            equipamentos[total++] = new Equipamento(codigo, nome, tipo, quantidade, valorBase, seguro);
            System.out.println("Equipamento cadastrado com sucesso!\n");
        } else {
            System.out.println("Limite m√°ximo de equipamentos atingido.\n");
        }
    }

    // Remove equipamento pelo nome (primeira ocorr√™ncia)
    public void removeEquipamento(String nome) {
        int posicao = totalEquipamentos(nome);
        if (posicao == -1) {
            System.out.println("Equipamento n√£o encontrado.\n");
            return;
        }
        for (int i = posicao; i < total - 1; i++) {
            equipamentos[i] = equipamentos[i + 1];
        }
        equipamentos[--total] = null;
        System.out.println("Equipamento removido com sucesso.\n");
    }

    // Busca equipamento pelo nome
    public Equipamento buscaEquipamentoPeloNome(String nome) {
        for (int i = 0; i < total; i++) {
            if (equipamentos[i].getNome().equalsIgnoreCase(nome)) {
                return equipamentos[i];
            }
        }
        return null;
    }

    // Retorna a posi√ß√£o do equipamento no array, se existir
    public int totalEquipamentos(String nome) {
        for (int i = 0; i < total; i++) {
            if (equipamentos[i].getNome().equalsIgnoreCase(nome)) {
                return i;
            }
        }
        return -1;
    }

    // Mostra todos os equipamentos cadastrados
    public void mostraEquipamentos() {
        if (total == 0) {
            System.out.println("Nenhum equipamento cadastrado.");
            return;
        }

        System.out.println("Lista de Equipamentos:");
        for (int i = 0; i < total; i++) {
            System.out.println(equipamentos[i]);
        }
    }
}
```

---

### üß™ Exemplo de uso da classe

```java
public class TesteCadastro {
    public static void main(String[] args) {
        CadastroEquipamento cadastro = new CadastroEquipamento();
        
        // Mostra os 6 equipamentos iniciais
        cadastro.mostraEquipamentos();

        // Busca por nome
        Equipamento e = cadastro.buscaEquipamentoPeloNome("Corda Naval M√©dia");
        if (e != null) {
            System.out.println("\nEncontrado: " + e);
        }

        // Remove um equipamento
        cadastro.removeEquipamento("Barra Curva");

        // Mostra ap√≥s remo√ß√£o
        System.out.println("\nAp√≥s remo√ß√£o:");
        cadastro.mostraEquipamentos();
    }
}
```

---

Se quiser, posso montar tamb√©m uma **interface de menu** para que o usu√°rio possa interagir com o cadastro de forma mais amig√°vel via console. Deseja isso?


PROMPT 4:
Preciso de uma Classe CadastroCliente que:
- Armazena at√© 10 clientes
- M√©todos: adicionaCliente, buscaClientePeloNome, mostraClientes

SAIDA 4:
Claro! Abaixo est√° a implementa√ß√£o completa da **classe `CadastroCliente`**, que:

* Armazena at√© 10 objetos da classe `Cliente`
* Possui os m√©todos:

  * `adicionaCliente()` ‚Äì adiciona um novo cliente
  * `buscaClientePeloNome(String nome)` ‚Äì retorna o cliente correspondente
  * `mostraClientes()` ‚Äì imprime todos os clientes cadastrados

> **Pr√©-requisitos:** voc√™ j√° deve ter a classe `Cliente` e a classe `Equipamento` funcionando.

---

### ‚úÖ Classe `CadastroCliente`

```java
import java.util.Scanner;

public class CadastroCliente {
    private Cliente[] clientes = new Cliente[10];
    private int total = 0;
    private Scanner entrada = new Scanner(System.in);

    // Adiciona cliente (com equipamento alugado passado como par√¢metro)
    public void adicionaCliente(Equipamento equipamentoAlugado) {
        if (total >= clientes.length) {
            System.out.println("Limite de clientes atingido.");
            return;
        }

        System.out.print("Digite a matr√≠cula do cliente: ");
        int matricula = entrada.nextInt();
        entrada.nextLine(); // limpa o buffer
        System.out.print("Digite o nome do cliente: ");
        String nome = entrada.nextLine();
        System.out.print("Digite o nome da academia: ");
        String academia = entrada.nextLine();

        // Verifica se h√° estoque do equipamento
        if (equipamentoAlugado.retirar()) {
            clientes[total++] = new Cliente(matricula, nome, academia, equipamentoAlugado);
            System.out.println("Cliente cadastrado com sucesso e equipamento alugado!");
        } else {
            System.out.println("N√£o h√° unidades dispon√≠veis para este equipamento.");
        }
    }

    // Busca cliente pelo nome
    public Cliente buscaClientePeloNome(String nome) {
        for (int i = 0; i < total; i++) {
            if (clientes[i].getNome().equalsIgnoreCase(nome)) {
                return clientes[i];
            }
        }
        return null;
    }

    // Mostra todos os clientes
    public void mostraClientes() {
        if (total == 0) {
            System.out.println("Nenhum cliente cadastrado.");
            return;
        }

        System.out.println("Lista de Clientes:");
        for (int i = 0; i < total; i++) {
            System.out.println(clientes[i]);
        }
    }
}
```

---

### üß™ Exemplo de uso da classe

```java
public class TesteCadastroCliente {
    public static void main(String[] args) {
        CadastroEquipamento cadastroEquipamento = new CadastroEquipamento();
        CadastroCliente cadastroCliente = new CadastroCliente();

        // Buscar um equipamento para alugar
        Equipamento equip = cadastroEquipamento.buscaEquipamentoPeloNome("Kettlebell 12kg");

        if (equip != null) {
            cadastroCliente.adicionaCliente(equip);
        } else {
            System.out.println("Equipamento n√£o encontrado.");
        }

        // Mostrar todos os clientes cadastrados
        System.out.println("\nClientes cadastrados:");
        cadastroCliente.mostraClientes();
    }
}
```

---

### ‚úÖ Integra√ß√£o com estoque do equipamento

A chamada `equipamentoAlugado.retirar()` no m√©todo `adicionaCliente()` garante que o aluguel s√≥ acontece se houver estoque dispon√≠vel.

---

Se quiser, posso montar um **menu interativo com cadastro de clientes e aluguel de equipamentos**. Deseja esse recurso?


PROMPT 5:
Preciso de uma Classe Aluguel (aplica√ß√£o com m√©todo main) que contenha: Menu:
1 ‚Äì Incluir Cliente
2 ‚Äì Mostrar clientes cadastrados
3 ‚Äì Pesquisar cliente por nome
4 ‚Äì Incluir equipamento
5 ‚Äì Mostrar equipamentos
6 ‚Äì Pesquisar equipamento por nome
7 ‚Äì Retirar equipamento
8 ‚Äì Devolver equipamento
9 ‚Äì Mostrar quantidade total de equipamentos dispon√≠veis

SAIDA 5:
Perfeito! Abaixo est√° a implementa√ß√£o completa da **classe `Aluguel`**, que funciona como **classe principal da aplica√ß√£o com `main()`**, incluindo o **menu interativo** com as op√ß√µes solicitadas:

---

### ‚úÖ Classe `Aluguel` (com m√©todo `main` e menu)

```java
import java.util.Scanner;

public class Aluguel {
    public static void main(String[] args) {
        Scanner entrada = new Scanner(System.in);
        CadastroCliente cadastroCliente = new CadastroCliente();
        CadastroEquipamento cadastroEquipamento = new CadastroEquipamento();

        int opcao;

        do {
            System.out.println("\n--- MENU ALUGUEL DE EQUIPAMENTOS ---");
            System.out.println("1 ‚Äì Incluir Cliente");
            System.out.println("2 ‚Äì Mostrar clientes cadastrados");
            System.out.println("3 ‚Äì Pesquisar cliente por nome");
            System.out.println("4 ‚Äì Incluir equipamento");
            System.out.println("5 ‚Äì Mostrar equipamentos");
            System.out.println("6 ‚Äì Pesquisar equipamento por nome");
            System.out.println("7 ‚Äì Retirar equipamento");
            System.out.println("8 ‚Äì Devolver equipamento");
            System.out.println("9 ‚Äì Mostrar quantidade total de equipamentos dispon√≠veis");
            System.out.println("0 ‚Äì Sair");
            System.out.print("Escolha uma op√ß√£o: ");
            opcao = entrada.nextInt();
            entrada.nextLine(); // limpar buffer

            switch (opcao) {
                case 1: // Incluir Cliente
                    System.out.print("Digite o nome do equipamento a ser alugado: ");
                    String nomeEquip = entrada.nextLine();
                    Equipamento equipamento = cadastroEquipamento.buscaEquipamentoPeloNome(nomeEquip);
                    if (equipamento != null) {
                        cadastroCliente.adicionaCliente(equipamento);
                    } else {
                        System.out.println("Equipamento n√£o encontrado.");
                    }
                    break;

                case 2: // Mostrar clientes
                    cadastroCliente.mostraClientes();
                    break;

                case 3: // Pesquisar cliente por nome
                    System.out.print("Digite o nome do cliente: ");
                    String nomeCli = entrada.nextLine();
                    Cliente cliente = cadastroCliente.buscaClientePeloNome(nomeCli);
                    if (cliente != null) {
                        System.out.println("Cliente encontrado: " + cliente);
                    } else {
                        System.out.println("Cliente n√£o encontrado.");
                    }
                    break;

                case 4: // Incluir equipamento
                    cadastroEquipamento.adicionaEquipamento();
                    break;

                case 5: // Mostrar equipamentos
                    cadastroEquipamento.mostraEquipamentos();
                    break;

                case 6: // Pesquisar equipamento por nome
                    System.out.print("Digite o nome do equipamento: ");
                    String nomeEquipamento = entrada.nextLine();
                    Equipamento eq = cadastroEquipamento.buscaEquipamentoPeloNome(nomeEquipamento);
                    if (eq != null) {
                        System.out.println("Equipamento encontrado: " + eq);
                    } else {
                        System.out.println("Equipamento n√£o encontrado.");
                    }
                    break;

                case 7: // Retirar equipamento
                    System.out.print("Digite o nome do equipamento para retirada: ");
                    String retira = entrada.nextLine();
                    Equipamento eqRetira = cadastroEquipamento.buscaEquipamentoPeloNome(retira);
                    if (eqRetira != null && eqRetira.retirar()) {
                        System.out.println("Equipamento retirado com sucesso.");
                    } else {
                        System.out.println("Equipamento n√£o dispon√≠vel.");
                    }
                    break;

                case 8: // Devolver equipamento
                    System.out.print("Digite o nome do equipamento para devolu√ß√£o: ");
                    String devolve = entrada.nextLine();
                    Equipamento eqDevolve = cadastroEquipamento.buscaEquipamentoPeloNome(devolve);
                    if (eqDevolve != null) {
                        eqDevolve.devolver();
                        System.out.println("Equipamento devolvido com sucesso.");
                    } else {
                        System.out.println("Equipamento n√£o encontrado.");
                    }
                    break;

                case 9: // Mostrar total de equipamentos dispon√≠veis
                    int totalDisponivel = 0;
                    for (int i = 0; i < 10; i++) {
                        Equipamento e = cadastroEquipamento.buscaPorIndice(i);
                        if (e != null) {
                            totalDisponivel += e.getQuantidadeDisponivel();
                        }
                    }
                    System.out.println("Total de equipamentos dispon√≠veis: " + totalDisponivel);
                    break;

                case 0:
                    System.out.println("Saindo do sistema...");
                    break;

                default:
                    System.out.println("Op√ß√£o inv√°lida. Tente novamente.");
            }

        } while (opcao != 0);

        entrada.close();
    }
}
```

---

### ‚úÖ Adi√ß√£o necess√°ria no `CadastroEquipamento`

Para o item 9 funcionar, adicione este m√©todo auxiliar na classe `CadastroEquipamento`:

```java
public Equipamento buscaPorIndice(int i) {
    if (i >= 0 && i < total) {
        return equipamentos[i];
    }
    return null;
}
```

---

### üìå Observa√ß√µes

* A aplica√ß√£o inicia com **6 equipamentos pr√©-cadastrados**.
* O m√©todo `retirar()` e `devolver()` gerenciam corretamente o estoque.
* A classe `CadastroCliente` s√≥ permite alugar se houver disponibilidade.

---

Se quiser que o sistema grave os dados em arquivos (para persist√™ncia), posso ajudar com isso tamb√©m. Deseja essa funcionalidade?

PROMPT 6: 
Me de sugestoes para um metodo que seja sobre pr√©-aluguel de um equipamento

SAIDA 6:
Claro! Um **m√©todo de pr√©-aluguel** pode simular a reserva de um equipamento **sem efetuar a retirada imediata** ‚Äî √∫til para planejamento, eventos ou fila de espera. A ideia √© marcar o interesse no aluguel, verificar disponibilidade e calcular valores, sem afetar o estoque diretamente.

---

### ‚úÖ Nome sugerido: `preAlugarEquipamento`

---

### üéØ O que esse m√©todo pode fazer:

1. **Verificar se o equipamento existe e tem unidades dispon√≠veis.**
2. **Calcular o valor do aluguel**, com base no tempo (7, 15, 30 dias) e se o seguro ser√° contratado.
3. **Simular** a reserva, mas **n√£o alterar o estoque** ainda.
4. **Opcional:** perguntar ao usu√°rio se deseja confirmar a reserva (e a√≠ sim chamar `retirar()`).

---

### üß† Benef√≠cios

* Permite ao cliente saber o custo antes de alugar.
* Garante que a l√≥gica de valores com desconto e seguro seja reaproveitada.
* Pode ser o passo anterior ao cadastro de um `Cliente`.

---

### ‚úÖ Exemplo do m√©todo `preAlugarEquipamento` (na classe `CadastroEquipamento` ou no `main`)

```java
public void preAlugarEquipamento() {
    Scanner entrada = new Scanner(System.in);
    
    System.out.print("Digite o nome do equipamento: ");
    String nome = entrada.nextLine();
    
    Equipamento equipamento = buscaEquipamentoPeloNome(nome);
    
    if (equipamento == null) {
        System.out.println("Equipamento n√£o encontrado.");
        return;
    }
    
    if (equipamento.getQuantidadeDisponivel() == 0) {
        System.out.println("Equipamento atualmente sem disponibilidade.");
        return;
    }
    
    System.out.print("Por quantos dias deseja alugar? (7, 15 ou 30): ");
    int dias = entrada.nextInt();

    System.out.print("Deseja contratar seguro? (true/false): ");
    boolean contratarSeguro = entrada.nextBoolean();

    // Simular sem alterar o atributo real
    boolean seguroOriginal = equipamento.isSeguro();
    equipamento.setSeguro(contratarSeguro);
    
    double valor = equipamento.calcularValorAluguel(dias);
    
    // Restaurar valor original do seguro
    equipamento.setSeguro(seguroOriginal);

    System.out.println("Valor estimado do aluguel: R$ " + String.format("%.2f", valor));
    System.out.println("Deseja confirmar o aluguel agora? (1 - Sim / 2 - N√£o): ");
    int opcao = entrada.nextInt();
    
    if (opcao == 1) {
        if (equipamento.retirar()) {
            System.out.println("Aluguel confirmado. Estoque atualizado.");
        } else {
            System.out.println("Erro ao retirar equipamento. Verifique disponibilidade.");
        }
    } else {
        System.out.println("Pr√©-aluguel cancelado.");
    }
}
```

---

### ‚úÖ Onde colocar?

* Pode ser um m√©todo dentro da `CadastroEquipamento`
* Ou diretamente usado no `main()` dentro da classe `Aluguel`, como op√ß√£o `10` do menu

---

### ‚úÖ Op√ß√£o extra no menu:

```java
System.out.println("10 ‚Äì Simular pr√©-aluguel de equipamento");
```

---

Se quiser, posso integrar esse m√©todo direto no seu menu atual, ou criar uma pequena interface de simula√ß√£o para m√∫ltiplos equipamentos. Deseja isso?
